<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classdicomhero_1_1_association_base" kind="class" language="C++" prot="public">
    <compoundname>dicomhero::AssociationBase</compoundname>
    <derivedcompoundref refid="classdicomhero_1_1_association_s_c_p" prot="public" virt="non-virtual">dicomhero::AssociationSCP</derivedcompoundref>
    <derivedcompoundref refid="classdicomhero_1_1_association_s_c_u" prot="public" virt="non-virtual">dicomhero::AssociationSCU</derivedcompoundref>
    <includes local="no">acse.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdicomhero_1_1_association_base_1a43c683e7f69ef7a43c1304a4784a1151" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; implementation::associationBase &gt;</type>
        <definition>std::shared_ptr&lt;implementation::associationBase&gt; dicomhero::AssociationBase::m_pAssociation</definition>
        <argsstring></argsstring>
        <name>m_pAssociation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/acse.h" line="392" column="21" bodyfile="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/acse.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdicomhero_1_1_association_base_1a35a266feb6cefe55e4843b5b379455fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dicomhero::AssociationBase::~AssociationBase</definition>
        <argsstring>()</argsstring>
        <name>~AssociationBase</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/acse.h" line="270" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdicomhero_1_1_association_base_1a4f715ac618f5a35aae23e1776d5e29be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdicomhero_1_1_association_base" kindref="compound">AssociationBase</ref> &amp;</type>
        <definition>AssociationBase&amp; dicomhero::AssociationBase::operator=</definition>
        <argsstring>(const AssociationBase &amp;source)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classdicomhero_1_1_association_base" kindref="compound">AssociationBase</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/acse.h" line="272" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classdicomhero_1_1_association_base_1ab068896e6d8011d69d619bae4e222d0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdicomhero_1_1_association_message" kindref="compound">AssociationMessage</ref></type>
        <definition>AssociationMessage dicomhero::AssociationBase::getCommand</definition>
        <argsstring>()</argsstring>
        <name>getCommand</name>
        <briefdescription>
<para>Read a command dataset and its payload (if any). </para>
        </briefdescription>
        <detaileddescription>
<para>Throws <ref refid="classdicomhero_1_1_stream_closed_error" kindref="compound">StreamClosedError</ref> if the association has been released or aborted.</para>
<para><simplesect kind="return"><para>an AssociationDataSet containing a command and its payload.</para>
</simplesect>
<simplesect kind="warning"><para>[REQ_CONST_COPY_DOCUMENTATION] the value returned by this method should not be modified and therefore should be assigned to a const qualified variable. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/acse.h" line="286" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classdicomhero_1_1_association_base_1a2cab2955e7a9171e96ba2044a0ecf4c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdicomhero_1_1_association_message" kindref="compound">AssociationMessage</ref></type>
        <definition>AssociationMessage dicomhero::AssociationBase::getResponse</definition>
        <argsstring>(std::uint16_t messageId)</argsstring>
        <name>getResponse</name>
        <param>
          <type>std::uint16_t</type>
          <declname>messageId</declname>
        </param>
        <briefdescription>
<para>Read a response dataset and its payload (if any). </para>
        </briefdescription>
        <detaileddescription>
<para>Throws <ref refid="classdicomhero_1_1_stream_closed_error" kindref="compound">StreamClosedError</ref> if the association has been released or aborted.</para>
<para><simplesect kind="return"><para>an AssociationDataSet containing a response and its payload.</para>
</simplesect>
<simplesect kind="warning"><para>[REQ_CONST_COPY_DOCUMENTATION] the value returned by this method should not be modified and therefore should be assigned to a const qualified variable. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/acse.h" line="300" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classdicomhero_1_1_association_base_1ae17f8e4076883f9f830547b638c3b699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dicomhero::AssociationBase::sendMessage</definition>
        <argsstring>(const AssociationMessage &amp;messageDataSet)</argsstring>
        <name>sendMessage</name>
        <param>
          <type>const <ref refid="classdicomhero_1_1_association_message" kindref="compound">AssociationMessage</ref> &amp;</type>
          <declname>messageDataSet</declname>
        </param>
        <briefdescription>
<para>Send a DICOM message to the connected peer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>messageDataSet</parametername>
</parameternamelist>
<parameterdescription>
<para>the DICOM message to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/acse.h" line="308" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdicomhero_1_1_association_base_1af58cadfa5789f31d02056c26da2b60a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dicomhero::AssociationBase::release</definition>
        <argsstring>()</argsstring>
        <name>release</name>
        <briefdescription>
<para>Releases the association. </para>
        </briefdescription>
        <detaileddescription>
<para>The method blocks until the other party acknowledges the release command or until the ACSE timout expires. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/acse.h" line="317" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdicomhero_1_1_association_base_1a68e9e3baea45c66c89c0f89ec518e18f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dicomhero::AssociationBase::abort</definition>
        <argsstring>()</argsstring>
        <name>abort</name>
        <briefdescription>
<para>Aborts the association. </para>
        </briefdescription>
        <detaileddescription>
<para>The association will be aborted as soon as possible. The other party will not acknowledge the abort command. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/acse.h" line="326" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdicomhero_1_1_association_base_1a9f610ca0f1411190fd213e2831dbaaa1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dicomhero::AssociationBase::getThisAET</definition>
        <argsstring>() const</argsstring>
        <name>getThisAET</name>
        <briefdescription>
<para>Returns our AET. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>our AET </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/acse.h" line="334" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classdicomhero_1_1_association_base_1a6b7930b252695a541e830caec7ed03f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dicomhero::AssociationBase::getOtherAET</definition>
        <argsstring>() const</argsstring>
        <name>getOtherAET</name>
        <briefdescription>
<para>Returns the other party&apos;s AET. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the connected peer&apos;s AET </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/acse.h" line="342" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classdicomhero_1_1_association_base_1a7baa15d3740f90aedb050cb07d6bd101" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dicomhero::AssociationBase::getTransferSyntax</definition>
        <argsstring>(const std::string &amp;abstractSyntax) const</argsstring>
        <name>getTransferSyntax</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>abstractSyntax</declname>
        </param>
        <briefdescription>
<para>Returns the transfer syntax negotiated for a specific abstract syntax. </para>
        </briefdescription>
        <detaileddescription>
<para>This method has been deprecated: use <ref refid="classdicomhero_1_1_association_base_1ac69b0ec7917dd83cdc418729b0455aef" kindref="member">getTransferSyntaxes()</ref> instead.</para>
<para>Throws:<itemizedlist>
<listitem><para><ref refid="classdicomhero_1_1_acse_no_transfer_syntax_error" kindref="compound">AcseNoTransferSyntaxError</ref> if no transfer syntax is available for the requested abstract syntax or</para>
</listitem><listitem><para><ref refid="classdicomhero_1_1_acse_presentation_context_not_requested_error" kindref="compound">AcsePresentationContextNotRequestedError</ref> if the abstract syntax was not negotiated at all.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>abstractSyntax</parametername>
</parameternamelist>
<parameterdescription>
<para>the abstract syntax for which the transfer syntax is requested </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the negotiated transfer syntax for the specified abstract syntax </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/acse.h" line="363" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classdicomhero_1_1_association_base_1ac69b0ec7917dd83cdc418729b0455aef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; dicomhero::AssociationBase::getTransferSyntaxes</definition>
        <argsstring>(const std::string &amp;abstractSyntax) const</argsstring>
        <name>getTransferSyntaxes</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>abstractSyntax</declname>
        </param>
        <briefdescription>
<para>Returns the transfer syntaxes negotiated for a specific abstract syntax. </para>
        </briefdescription>
        <detaileddescription>
<para>Throws:<itemizedlist>
<listitem><para><ref refid="classdicomhero_1_1_acse_no_transfer_syntax_error" kindref="compound">AcseNoTransferSyntaxError</ref> if no transfer syntax is available for the requested abstract syntax or</para>
</listitem><listitem><para><ref refid="classdicomhero_1_1_acse_presentation_context_not_requested_error" kindref="compound">AcsePresentationContextNotRequestedError</ref> if the abstract syntax was not negotiated at all.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>abstractSyntax</parametername>
</parameternamelist>
<parameterdescription>
<para>the abstract syntax for which the transfer syntax is requested </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the negotiated transfer syntaxes for the specified abstract syntax </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/acse.h" line="381" column="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classdicomhero_1_1_association_base_1a6dcb03aaaaffcf782a540b7e7ef622ce" prot="protected" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>dicomhero::AssociationBase::AssociationBase</definition>
        <argsstring>(const std::shared_ptr&lt; implementation::associationBase &gt; &amp;pAssociationBase)</argsstring>
        <name>AssociationBase</name>
        <param>
          <type>const std::shared_ptr&lt; implementation::associationBase &gt; &amp;</type>
          <declname>pAssociationBase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/acse.h" line="388" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classdicomhero_1_1_association_base_1abb0fe22f769b3bba4f1cfbcfdf271f80" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::shared_ptr&lt; implementation::associationBase &gt; &amp;</type>
        <definition>const std::shared_ptr&lt;implementation::associationBase&gt;&amp; getAssociationBaseImplementation</definition>
        <argsstring>(const AssociationBase &amp;associationBase)</argsstring>
        <name>getAssociationBaseImplementation</name>
        <param>
          <type>const <ref refid="classdicomhero_1_1_association_base" kindref="compound">AssociationBase</ref> &amp;</type>
          <declname>associationBase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/acse.h" line="391" column="34"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The base class for the SCU and SCP classes (<ref refid="classdicomhero_1_1_association_s_c_u" kindref="compound">AssociationSCU</ref> and associationSCP) </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>dicomhero::AssociationSCP</label>
        <link refid="classdicomhero_1_1_association_s_c_p"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dicomhero::AssociationSCU</label>
        <link refid="classdicomhero_1_1_association_s_c_u"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>dicomhero::AssociationBase</label>
        <link refid="classdicomhero_1_1_association_base"/>
      </node>
    </inheritancegraph>
    <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/acse.h" line="262" column="1" bodyfile="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/acse.h" bodystart="263" bodyend="396"/>
    <listofallmembers>
      <member refid="classdicomhero_1_1_association_base_1a68e9e3baea45c66c89c0f89ec518e18f" prot="public" virt="non-virtual"><scope>dicomhero::AssociationBase</scope><name>abort</name></member>
      <member refid="classdicomhero_1_1_association_base_1a6dcb03aaaaffcf782a540b7e7ef622ce" prot="protected" virt="non-virtual"><scope>dicomhero::AssociationBase</scope><name>AssociationBase</name></member>
      <member refid="classdicomhero_1_1_association_base_1abb0fe22f769b3bba4f1cfbcfdf271f80" prot="private" virt="non-virtual"><scope>dicomhero::AssociationBase</scope><name>getAssociationBaseImplementation</name></member>
      <member refid="classdicomhero_1_1_association_base_1ab068896e6d8011d69d619bae4e222d0f" prot="public" virt="non-virtual"><scope>dicomhero::AssociationBase</scope><name>getCommand</name></member>
      <member refid="classdicomhero_1_1_association_base_1a6b7930b252695a541e830caec7ed03f8" prot="public" virt="non-virtual"><scope>dicomhero::AssociationBase</scope><name>getOtherAET</name></member>
      <member refid="classdicomhero_1_1_association_base_1a2cab2955e7a9171e96ba2044a0ecf4c8" prot="public" virt="non-virtual"><scope>dicomhero::AssociationBase</scope><name>getResponse</name></member>
      <member refid="classdicomhero_1_1_association_base_1a9f610ca0f1411190fd213e2831dbaaa1" prot="public" virt="non-virtual"><scope>dicomhero::AssociationBase</scope><name>getThisAET</name></member>
      <member refid="classdicomhero_1_1_association_base_1a7baa15d3740f90aedb050cb07d6bd101" prot="public" virt="non-virtual"><scope>dicomhero::AssociationBase</scope><name>getTransferSyntax</name></member>
      <member refid="classdicomhero_1_1_association_base_1ac69b0ec7917dd83cdc418729b0455aef" prot="public" virt="non-virtual"><scope>dicomhero::AssociationBase</scope><name>getTransferSyntaxes</name></member>
      <member refid="classdicomhero_1_1_association_base_1a43c683e7f69ef7a43c1304a4784a1151" prot="private" virt="non-virtual"><scope>dicomhero::AssociationBase</scope><name>m_pAssociation</name></member>
      <member refid="classdicomhero_1_1_association_base_1a4f715ac618f5a35aae23e1776d5e29be" prot="public" virt="non-virtual"><scope>dicomhero::AssociationBase</scope><name>operator=</name></member>
      <member refid="classdicomhero_1_1_association_base_1af58cadfa5789f31d02056c26da2b60a8" prot="public" virt="non-virtual"><scope>dicomhero::AssociationBase</scope><name>release</name></member>
      <member refid="classdicomhero_1_1_association_base_1ae17f8e4076883f9f830547b638c3b699" prot="public" virt="non-virtual"><scope>dicomhero::AssociationBase</scope><name>sendMessage</name></member>
      <member refid="classdicomhero_1_1_association_base_1a35a266feb6cefe55e4843b5b379455fb" prot="public" virt="virtual"><scope>dicomhero::AssociationBase</scope><name>~AssociationBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
