<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classdicomhero_1_1_draw_bitmap" kind="class" language="C++" prot="public">
    <compoundname>dicomhero::DrawBitmap</compoundname>
    <includes local="no">drawBitmap.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdicomhero_1_1_draw_bitmap_1a19734549a01eef4e36758d41a08df204" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; implementation::drawBitmap &gt;</type>
        <definition>std::shared_ptr&lt;implementation::drawBitmap&gt; dicomhero::DrawBitmap::m_pDrawBitmap</definition>
        <argsstring></argsstring>
        <name>m_pDrawBitmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/drawBitmap.h" line="125" column="21" bodyfile="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/drawBitmap.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdicomhero_1_1_draw_bitmap_1aea53bc0092c8f8e25ab5a99cd0f7bec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dicomhero::DrawBitmap::DrawBitmap</definition>
        <argsstring>()</argsstring>
        <name>DrawBitmap</name>
        <briefdescription>
<para>Construct a <ref refid="classdicomhero_1_1_draw_bitmap" kindref="compound">DrawBitmap</ref> with no transforms. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="classdicomhero_1_1_draw_bitmap_1a662dbb1010429a3a2cad9f3aa4ad7130" kindref="member">getBitmap()</ref> method will not apply any <ref refid="classdicomhero_1_1_transform" kindref="compound">Transform</ref> to the <ref refid="classdicomhero_1_1_image" kindref="compound">Image</ref> before generating the bitmap. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/drawBitmap.h" line="58" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdicomhero_1_1_draw_bitmap_1a8bc0467a9cf37d1c361fcf9bceb48686" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>dicomhero::DrawBitmap::DrawBitmap</definition>
        <argsstring>(const Transform &amp;transformsChain)</argsstring>
        <name>DrawBitmap</name>
        <param>
          <type>const <ref refid="classdicomhero_1_1_transform" kindref="compound">Transform</ref> &amp;</type>
          <declname>transformsChain</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classdicomhero_1_1_draw_bitmap" kindref="compound">DrawBitmap</ref> object that always apply the transforms in the specified <ref refid="classdicomhero_1_1_transforms_chain" kindref="compound">TransformsChain</ref> before calculating the bitmap of the <ref refid="classdicomhero_1_1_image" kindref="compound">Image</ref> in the <ref refid="classdicomhero_1_1_draw_bitmap_1a662dbb1010429a3a2cad9f3aa4ad7130" kindref="member">getBitmap()</ref> method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transformsChain</parametername>
</parameternamelist>
<parameterdescription>
<para>the transforms to apply to the <ref refid="classdicomhero_1_1_image" kindref="compound">Image</ref> in the <ref refid="classdicomhero_1_1_draw_bitmap_1a662dbb1010429a3a2cad9f3aa4ad7130" kindref="member">getBitmap()</ref> method </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/drawBitmap.h" line="68" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdicomhero_1_1_draw_bitmap_1a7ef986acae2dc063052b043716cd9365" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dicomhero::DrawBitmap::DrawBitmap</definition>
        <argsstring>(const DrawBitmap &amp;source)</argsstring>
        <name>DrawBitmap</name>
        <param>
          <type>const <ref refid="classdicomhero_1_1_draw_bitmap" kindref="compound">DrawBitmap</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>source <ref refid="classdicomhero_1_1_draw_bitmap" kindref="compound">DrawBitmap</ref> object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/drawBitmap.h" line="76" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdicomhero_1_1_draw_bitmap_1acf627970db80972c782782dd8b7ad4b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdicomhero_1_1_draw_bitmap" kindref="compound">DrawBitmap</ref> &amp;</type>
        <definition>DrawBitmap&amp; dicomhero::DrawBitmap::operator=</definition>
        <argsstring>(const DrawBitmap &amp;source)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classdicomhero_1_1_draw_bitmap" kindref="compound">DrawBitmap</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/drawBitmap.h" line="78" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classdicomhero_1_1_draw_bitmap_1a3e1c9cbadc093052b810229290a4d253" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dicomhero::DrawBitmap::~DrawBitmap</definition>
        <argsstring>()</argsstring>
        <name>~DrawBitmap</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/drawBitmap.h" line="83" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdicomhero_1_1_draw_bitmap_1a662dbb1010429a3a2cad9f3aa4ad7130" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t dicomhero::DrawBitmap::getBitmap</definition>
        <argsstring>(const Image &amp;image, drawBitmapType_t drawBitmapType, std::uint32_t rowAlignBytes, char *destination, size_t destinationSize)</argsstring>
        <name>getBitmap</name>
        <param>
          <type>const <ref refid="classdicomhero_1_1_image" kindref="compound">Image</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type><ref refid="definitions_8h_1a257a8cd2a03bf0dce2d65b2b9031d719" kindref="member">drawBitmapType_t</ref></type>
          <declname>drawBitmapType</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>rowAlignBytes</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>destination</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>destinationSize</declname>
        </param>
        <briefdescription>
<para>Apply the transforms defined in the constructor (if any) to the input image, then calculate an array of bytes containing a bitmap that can be rendered by the operating system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>the image for which the bitmap must be calculated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>drawBitmapType</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of bitmap to generate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowAlignBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes on which the bitmap rows are aligned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the pre-allocated buffer where <ref refid="classdicomhero_1_1_draw_bitmap_1a662dbb1010429a3a2cad9f3aa4ad7130" kindref="member">getBitmap()</ref> will store the generated bitmap </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destinationSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the allocated buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bytes occupied by the bitmap in the pre-allocated buffer. If the number of occupied bytes is bigger than the value of the parameter bufferSize then the method doesn&apos;t generate the bitmap </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/drawBitmap.h" line="102" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classdicomhero_1_1_draw_bitmap_1aa4f983daccf583540def1747dd17001a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdicomhero_1_1_memory" kindref="compound">Memory</ref></type>
        <definition>Memory dicomhero::DrawBitmap::getBitmap</definition>
        <argsstring>(const Image &amp;image, drawBitmapType_t drawBitmapType, std::uint32_t rowAlignBytes)</argsstring>
        <name>getBitmap</name>
        <param>
          <type>const <ref refid="classdicomhero_1_1_image" kindref="compound">Image</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type><ref refid="definitions_8h_1a257a8cd2a03bf0dce2d65b2b9031d719" kindref="member">drawBitmapType_t</ref></type>
          <declname>drawBitmapType</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>rowAlignBytes</declname>
        </param>
        <briefdescription>
<para>Apply the transforms defined in the constructor (if any) to the input image, then calculate an array of bytes containing a bitmap that can be rendered by the operating system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>the image for which the bitmap must be calculated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>drawBitmapType</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of bitmap to generate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowAlignBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes on which the bitmap rows are aligned </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classdicomhero_1_1_memory" kindref="compound">Memory</ref> object referencing the buffer containing the generated bitmap</para>
</simplesect>
<simplesect kind="warning"><para>[REQ_CONST_COPY_DOCUMENTATION] the value returned by this method should not be modified and therefore should be assigned to a const qualified variable. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/drawBitmap.h" line="120" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classdicomhero_1_1_draw_bitmap_1a51790a8900d11565f7abac9b24dd2088" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::shared_ptr&lt; implementation::drawBitmap &gt; &amp;</type>
        <definition>const std::shared_ptr&lt;implementation::drawBitmap&gt;&amp; getDrawBitmapImplementation</definition>
        <argsstring>(const DrawBitmap &amp;drawBitmap)</argsstring>
        <name>getDrawBitmapImplementation</name>
        <param>
          <type>const <ref refid="classdicomhero_1_1_draw_bitmap" kindref="compound">DrawBitmap</ref> &amp;</type>
          <declname>drawBitmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/drawBitmap.h" line="124" column="34"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classdicomhero_1_1_draw_bitmap" kindref="compound">DrawBitmap</ref> takes care of converting an <ref refid="classdicomhero_1_1_image" kindref="compound">Image</ref> object into an array of bytes that can be displayed by the operating system facilities. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classdicomhero_1_1_draw_bitmap" kindref="compound">DrawBitmap</ref> can apply several transformations to the <ref refid="classdicomhero_1_1_image" kindref="compound">Image</ref> before generating the bitmap.</para>
<para><ref refid="classdicomhero_1_1_draw_bitmap" kindref="compound">DrawBitmap</ref> applies automatically the necessary color transform and high bit shift in order to obtain a 8 bits per channel RGB image. </para>
    </detaileddescription>
    <location file="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/drawBitmap.h" line="48" column="1" bodyfile="/opt/atlassian/pipelines/agent/build/dicomheroCore6/library/include/dicomhero6/drawBitmap.h" bodystart="49" bodyend="128"/>
    <listofallmembers>
      <member refid="classdicomhero_1_1_draw_bitmap_1aea53bc0092c8f8e25ab5a99cd0f7bec5" prot="public" virt="non-virtual"><scope>dicomhero::DrawBitmap</scope><name>DrawBitmap</name></member>
      <member refid="classdicomhero_1_1_draw_bitmap_1a8bc0467a9cf37d1c361fcf9bceb48686" prot="public" virt="non-virtual"><scope>dicomhero::DrawBitmap</scope><name>DrawBitmap</name></member>
      <member refid="classdicomhero_1_1_draw_bitmap_1a7ef986acae2dc063052b043716cd9365" prot="public" virt="non-virtual"><scope>dicomhero::DrawBitmap</scope><name>DrawBitmap</name></member>
      <member refid="classdicomhero_1_1_draw_bitmap_1a662dbb1010429a3a2cad9f3aa4ad7130" prot="public" virt="non-virtual"><scope>dicomhero::DrawBitmap</scope><name>getBitmap</name></member>
      <member refid="classdicomhero_1_1_draw_bitmap_1aa4f983daccf583540def1747dd17001a" prot="public" virt="non-virtual"><scope>dicomhero::DrawBitmap</scope><name>getBitmap</name></member>
      <member refid="classdicomhero_1_1_draw_bitmap_1a51790a8900d11565f7abac9b24dd2088" prot="private" virt="non-virtual"><scope>dicomhero::DrawBitmap</scope><name>getDrawBitmapImplementation</name></member>
      <member refid="classdicomhero_1_1_draw_bitmap_1a19734549a01eef4e36758d41a08df204" prot="private" virt="non-virtual"><scope>dicomhero::DrawBitmap</scope><name>m_pDrawBitmap</name></member>
      <member refid="classdicomhero_1_1_draw_bitmap_1acf627970db80972c782782dd8b7ad4b7" prot="public" virt="non-virtual"><scope>dicomhero::DrawBitmap</scope><name>operator=</name></member>
      <member refid="classdicomhero_1_1_draw_bitmap_1a3e1c9cbadc093052b810229290a4d253" prot="public" virt="virtual"><scope>dicomhero::DrawBitmap</scope><name>~DrawBitmap</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
